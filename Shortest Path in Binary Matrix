class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        if(grid[0][0]!=0 || grid[n-1][m-1] != 0) return -1;

        vector<vector<int>> d(n,vector<int>(m,1e9));
        queue<pair<int,int>> q;
        d[0][0]=1;
        q.push({0,0});
        while(!q.empty()){
            int row=q.front().first;
            int col=q.front().second;
            q.pop();

            int drow[]={-1,0,1};
            int dcol[]={-1,0,1};
            for(int i=0;i<3;i++){
                for(int j=0;j<3;j++){
                    if (drow[i] == 0 && dcol[j] == 0) continue;  
                    int nrow=row+drow[i];
                    int ncol=col+dcol[j];

                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==0 && d[nrow][ncol]>1+d[row][col]){
                        d[nrow][ncol]=1+d[row][col];
                        q.push({nrow,ncol});
                    }
                }
            }
        }
        if(d[n-1][m-1]==1e9){
            return -1;
        }else{
            return d[n-1][m-1];
        }
    }
};
