class Solution {
public:
    void dfs(int i,int j,vector<vector<int>> &vis,int drow[],int dcol[],vector<vector<char>>& board){
        vis[i][j]=1;
        board[i][j] = 'T';
        for(int k=0;k<4;k++){        
            int nrow=i+drow[k];
            int ncol=j+dcol[k];
            if (nrow >= 0 && nrow < board.size() && ncol >= 0 && ncol < board[0].size()
            && !vis[nrow][ncol] && board[nrow][ncol] == 'O') {
                dfs(nrow, ncol, vis, drow, dcol, board);
            }   
        }
    }
    vector<vector<char>> solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));

        int drow[4]={-1,0,1,0};
        int dcol[4]={0,1,0,-1};
        //row=0
        for(int j=0;j<m;j++){
            if(!vis[0][j] && board[0][j]=='O'){
                dfs(0,j,vis,drow,dcol,board);
            }
            if(!vis[n-1][j] && board[n-1][j]=='O'){
                dfs(n-1,j,vis,drow,dcol,board);
            }
        }
        for(int i=0;i<n;i++){
            if(!vis[i][0] && board[i][0]=='O'){
                dfs(i,0,vis,drow,dcol,board);
            }
            if(!vis[i][m-1] && board[i][m-1]=='O'){
                dfs(i,m-1,vis,drow,dcol,board);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] =='T'){
                    board[i][j]='O';
                }else{
                    board[i][j]='X';
                }
            }
        }
        return board;
    }
};
