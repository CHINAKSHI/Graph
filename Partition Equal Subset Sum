//recursion
class Solution {
public:
    bool f(int ind, int target, vector<int>& a){
        if(target==0) return true;
        if(ind==0 )return a[0] == target;

        bool nottake=f(ind-1, target,a);
        bool take=false;
        if(a[ind]<=target) take=f(ind-1,target-a[ind],a);
        return take||nottake;
    }

    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<n; i++){
            sum+=nums[i];
        }

        if(sum%2==1) return false;
        else{
            return f(n-1,sum/2,nums);
        }
    }
};

//Memoization
class Solution {
public:
    bool f(int ind, int target, vector<int>& a, vector<vector<int>>&dp){
        if(target==0) return true;
        if(ind==0 )return a[0] == target;
        if(dp[ind][target]!=-1) return dp[ind][target];

        bool nottake=f(ind-1, target,a, dp);
        bool take=false;
        if(a[ind]<=target) take=f(ind-1,target-a[ind],a, dp);
        return dp[ind][target]=take||nottake;
    }

    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<n; i++){
            sum+=nums[i];
        }
        vector<vector<int>> dp(n+1,vector<int>((sum/2)+1,-1));
        if(sum%2==1) return false;
        else{
            return f(n-1,sum/2,nums,dp);
        }
    }
};

//Tabulation
   bool canPartition(vector<int>& a) {
        int n=a.size();
        int sum=0;
        for(int i=0;i<n; i++){
            sum+=a[i];
        }
        int target=sum/2;
        vector<vector<bool>> dp(n,vector<bool>((sum/2)+1,false));
        for(int i=0;i<n;i++){
            dp[i][0]=true;
        }

        if(a[0]<=target) dp[0][a[0]]=true;

        if(sum%2==1) return false;
        else{
            for(int ind=1;ind<n;ind++){
                for(int j=1;j<=target;j++){
                    bool nottake=dp[ind-1][j] ;
                    bool take=false;
                    if(a[ind]<=j) take=dp[ind-1][j-a[ind]];
                    dp[ind][j]=take||nottake;
                }
            }
            return dp[n-1][target];
        }
    }
};

//Space Optimization
    bool canPartition(vector<int>& a) {
        int n=a.size();
        int sum=0;
        for(int i=0;i<n; i++){
            sum+=a[i];
        }
        int target=sum/2;
        
        vector<bool> cur(target+1,false), pre(target+1,false);
        pre[0]=true;

        if(a[0]<=target) pre[a[0]]=true;

        if(sum%2==1) return false;
        else{
            for(int ind=1;ind<n;ind++){
                for(int j=1;j<=target;j++){
                    bool nottake=pre[j] ;
                    bool take=false;
                    if(a[ind]<=j) take=pre[j-a[ind]];
                    cur[j]=take||nottake;
                }
                pre=cur;
            }
            return pre[target];
        }
    }
};
